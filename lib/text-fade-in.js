// Generated by CoffeeScript 1.6.3
/*!
TextFadeIn v 1.0.0
https://github.com/mdesantis/TextFadeIn

Includes parts of Sizzle.js
http://sizzlejs.com/

Copyright 2013 Maurizio De Santis
Released under the MIT license
https://github.com/mdesantis/TextFadeIn/LICENSE
*/


(function() {
  var TextFadeIn;

  TextFadeIn = (function() {
    var BLANK_REPLACE_REGEX, asd, getText, randomSequence, replace, setText, shuffle, step;

    BLANK_REPLACE_REGEX = /[^\n]/g;

    asd = 'ciao';

    shuffle = function(a) {
      var i, j, x;
      i = a.length;
      while (i) {
        j = Math.floor(Math.random() * i);
        x = a[--i];
        a[i] = a[j];
        a[j] = x;
      }
      return a;
    };

    randomSequence = function(length) {
      var _i, _results;
      return shuffle((function() {
        _results = [];
        for (var _i = 0; 0 <= length ? _i <= length : _i >= length; 0 <= length ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this));
    };

    replace = function(element, text, sequence) {
      var character, index, prev_text;
      index = sequence.shift();
      prev_text = getText(element);
      character = text.charAt(index);
      return setText(element, "" + (prev_text.substr(0, index)) + character + (prev_text.substr(index + character.length)));
    };

    getText = function(element) {
      var node, nodeType, text, _i, _len;
      text = '';
      nodeType = element.nodeType;
      if (!nodeType) {
        for (_i = 0, _len = element.length; _i < _len; _i++) {
          node = element[_i];
          text += getText(node);
        }
      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
        if (typeof element.textContent === 'string') {
          return element.textContent;
        } else {
          if (element = element.firstChild) {
            text += getText(element);
            while (element = element.nextSibling) {
              text += getText(element);
            }
          }
        }
      } else if (nodeType === 3 || nodeType === 4) {
        return element.nodeValue;
      }
      return text;
    };

    setText = function(element, value) {
      while (element.hasChildNodes()) {
        element.removeChild(element.lastChild);
      }
      return element.appendChild(element.ownerDocument.createTextNode(value));
    };

    step = function(element, text, sequence, threads, interval, complete) {
      var i, _i;
      for (i = _i = 1; 1 <= threads ? _i <= threads : _i >= threads; i = 1 <= threads ? ++_i : --_i) {
        if (sequence.length === 0) {
          window.clearInterval(interval);
          if (typeof complete === "function") {
            complete();
          }
          return true;
        }
        replace(element, text, sequence);
      }
    };

    function TextFadeIn(element, text, options) {
      var _ref, _ref1;
      this.element = element;
      if (options != null) {
        this.text = text != null ? text : getText(this.element);
      } else {
        if (typeof text === 'object') {
          this.text = getText(this.element);
          options = text;
        } else {
          this.text = text != null ? text : getText(this.element);
          options = {};
        }
      }
      this.milliseconds = (_ref = options['milliseconds']) != null ? _ref : 1;
      this.threads = (_ref1 = options['threads']) != null ? _ref1 : 1;
      this.sequence = options['sequence'];
      this.start = options['start'];
      this.complete = options['complete'];
    }

    TextFadeIn.prototype.run = function() {
      var blankText, interval, sequenceClone,
        _this = this;
      if (this.sequence == null) {
        this.sequence = randomSequence(this.text.length);
      }
      sequenceClone = this.sequence.slice(0);
      blankText = this.text.replace(BLANK_REPLACE_REGEX, ' ');
      setText(this.element, blankText);
      interval = window.setInterval(function() {
        return step(_this.element, _this.text, sequenceClone, _this.threads, interval, _this.complete);
      }, this.milliseconds);
      return true;
    };

    return TextFadeIn;

  })();

  window.TextFadeIn = TextFadeIn;

}).call(this);
