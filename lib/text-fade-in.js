// Generated by CoffeeScript 1.6.3
/*!
TextFadeIn v 1.0.0
https://github.com/mdesantis/TextFadeIn

Copyright 2013 Maurizio De Santis
Released under the MIT license
https://github.com/mdesantis/TextFadeIn/LICENSE
*/


(function() {
  var $, TextFade;

  $ = window.jQuery;

  TextFade = function($element, action, options) {
    var BLANK_REPLACE_REGEX, blankText, defaultSettings, randomSequence, sequenceClone, shuffle, text, _base, _base1,
      _this = this;
    this.$element = $element;
    BLANK_REPLACE_REGEX = /[^\n]/g;
    shuffle = function(a) {
      var i, j, x;
      i = a.length;
      while (i) {
        j = Math.floor(Math.random() * i);
        x = a[--i];
        a[i] = a[j];
        a[j] = x;
      }
      return a;
    };
    randomSequence = function(length) {
      var _i, _results;
      return shuffle((function() {
        _results = [];
        for (var _i = 0; 0 <= length ? _i <= length : _i >= length; 0 <= length ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this));
    };
    defaultSettings = function() {
      return {
        'text': null,
        'milliseconds': 1,
        'threads': 1,
        'sequence': null,
        'start': null,
        'complete': null
      };
    };
    this._replace = function(sequence) {
      var character, index, prev_text;
      index = sequence.shift();
      prev_text = this.$element.text();
      character = this.endText.charAt(index);
      return this.$element.text("" + (prev_text.substr(0, index)) + character + (prev_text.substr(index + character.length)));
    };
    this._step = function(sequence) {
      var i, _base, _i, _ref;
      for (i = _i = 1, _ref = this.settings.threads; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        if (sequence.length === 0) {
          window.clearInterval(this.interval);
          return typeof (_base = this.settings).complete === "function" ? _base.complete() : void 0;
        }
        this._replace(sequence);
      }
    };
    this.settings = $.extend(defaultSettings(), options);
    text = (_base = this.settings).text != null ? (_base = this.settings).text : _base.text = this.$element.text();
    if ((_base1 = this.settings).sequence == null) {
      _base1.sequence = randomSequence(text.length);
    }
    sequenceClone = this.settings.sequence.slice(0);
    blankText = text.replace(BLANK_REPLACE_REGEX, ' ');
    switch (action) {
      case 'in':
        this.begText = blankText;
        this.endText = text;
        break;
      case 'out':
        this.begText = text;
        this.endText = blankText;
    }
    this.$element.text(this.begText);
    this.interval = window.setInterval(function() {
      return _this._step(sequenceClone);
    }, this.settings.milliseconds);
    return this;
  };

  $.fn.textFadeIn = function(options) {
    return this.each(function() {
      return new TextFade($(this), 'in', options);
    });
  };

  $.fn.textFadeOut = function(options) {
    return this.each(function() {
      return new TextFade($(this), 'out', options);
    });
  };

}).call(this);
