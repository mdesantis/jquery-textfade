// Generated by CoffeeScript 1.6.3
/*!
TextFadeIn v 1.0.0
https://github.com/mdesantis/TextFadeIn

Copyright 2013 Maurizio De Santis
Released under the MIT license
https://github.com/mdesantis/TextFadeIn/LICENSE
*/


(function() {
  var $, TextFadeIn;

  $ = window.jQuery;

  TextFadeIn = (function() {
    var BLANK_REPLACE_REGEX, randomSequence, shuffle;

    BLANK_REPLACE_REGEX = /[^\n]/g;

    shuffle = function(a) {
      var i, j, x;
      i = a.length;
      while (i) {
        j = Math.floor(Math.random() * i);
        x = a[--i];
        a[i] = a[j];
        a[j] = x;
      }
      return a;
    };

    randomSequence = function(length) {
      var _i, _results;
      return shuffle((function() {
        _results = [];
        for (var _i = 0; 0 <= length ? _i <= length : _i >= length; 0 <= length ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this));
    };

    TextFadeIn.prototype._replace = function(sequence) {
      var character, index, prev_text;
      index = sequence.shift();
      prev_text = this.$element.text();
      character = this.text.charAt(index);
      return this.$element.text("" + (prev_text.substr(0, index)) + character + (prev_text.substr(index + character.length)));
    };

    TextFadeIn.prototype._step = function(sequence) {
      var i, _i, _ref;
      for (i = _i = 1, _ref = this.threads; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        if (sequence.length === 0) {
          window.clearInterval(this.interval);
          return typeof this.complete === "function" ? this.complete() : void 0;
        }
        this._replace(sequence);
      }
    };

    function TextFadeIn($element, text, options) {
      var blankText, sequenceClone, _ref, _ref1,
        _this = this;
      this.$element = $element;
      if (options != null) {
        this.text = text != null ? text : this.$element.text();
      } else {
        if ($.isPlainObject(text)) {
          this.text = this.$element.text();
          options = text;
        } else {
          this.text = text != null ? text : this.$element.text();
          options = {};
        }
      }
      this.milliseconds = (_ref = options['milliseconds']) != null ? _ref : 1;
      this.threads = (_ref1 = options['threads']) != null ? _ref1 : 1;
      this.sequence = options['sequence'];
      this.start = options['start'];
      this.complete = options['complete'];
      if (this.sequence == null) {
        this.sequence = randomSequence(this.text.length);
      }
      sequenceClone = this.sequence.slice(0);
      blankText = this.text.replace(BLANK_REPLACE_REGEX, ' ');
      this.$element.text(blankText);
      this.interval = window.setInterval(function() {
        return _this._step(sequenceClone);
      }, this.milliseconds);
    }

    return TextFadeIn;

  })();

  $.fn.textFadeIn = function(text, options) {
    return this.each(function() {
      new TextFadeIn($(this), text, options);
      return true;
    });
  };

}).call(this);
